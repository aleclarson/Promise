// Generated by CoffeeScript 2.0.3
var PromiseTracer, Type, type;

Type = require("Type");

type = Type("PromiseTracer");

type.defineValues(function() {
  return {
    _promises: new Set,
    _data: new Map
  };
});

type.defineGetters({
  promises: function() {
    var promises;
    promises = [];
    this._promises.forEach((promise) => {
      return promises.push(this._inspect(promise));
    });
    return promises;
  },
  pending: function() {
    return this._filter("isPending");
  },
  fulfilled: function() {
    return this._filter("isFulfilled");
  },
  rejected: function() {
    return this._filter("isRejected");
  }
});

type.defineMethods({
  trace: function(promise, parent) {
    var data, parentData;
    if (this._promises.has(promise)) {
      return;
    }
    this._promises.add(promise);
    promise._tracer = this;
    this._data.set(promise, data = {
      name: promise.__name,
      parent: parent || null,
      children: new Set
    });
    if (parent) {
      if (!this._data.has(parent)) {
        this.trace(parent);
      }
      parentData = this._data.get(parent);
      parentData.children.add(promise);
    }
  },
  getChildren: function(promise) {
    var children;
    if (children = this._childMap.get(promise)) {
      return Array.from(children);
    } else {
      return [];
    }
  },
  getParent: function(promise) {
    return this._parentMap.get(promise);
  },
  _filter: function(key) {
    var promises;
    promises = [];
    this._promises.forEach((promise) => {
      if (!promise[key]) {
        return;
      }
      return promises.push(this._inspect(promise));
    });
    return promises;
  },
  _inspect: function(promise) {
    var data;
    data = this._data.get(promise);
    data = Object.assign({}, data, promise.inspect());
    data.children = Array.from(data.children);
    return data;
  }
});

module.exports = PromiseTracer = type.build();
